
---
AWSTemplateFormatVersion: 2010-09-09
Description: Basic VPC
Mappings:
  ARNNamespace:
    us-east-1:
      Partition: aws
    us-east-2:
      Partition: aws
    us-west-2:
      Partition: aws
    us-west-1:
      Partition: aws
    us-east-1:
      Partition: aws
    eu-central-1:
      Partition: aws
    ap-southeast-1:
      Partition: aws
    ap-northeast-1:
      Partition: aws
    ap-southeast-2:
      Partition: aws
    sa-east-1:
      Partition: aws
    us-gov-west-1:
      Partition: aws-us-gov
  S3Region:
    us-east-1:
      Region: us-east-1
    us-east-2:
      Region: us-east-2
    us-west-2:
      Region: us-east-1
    us-west-1:
      Region: us-east-1
    us-east-1:
      Region: us-east-1
    eu-central-1:
      Region: us-east-1
    ap-southeast-1:
      Region: us-east-1
    ap-northeast-1:
      Region: us-east-1
    ap-southeast-2:
      Region: us-east-1
    sa-east-1:
      Region: us-east-1
    us-gov-west-1:
      Region: us-gov-west-1
Parameters:
  Name:
    Type: String
    Description: Name references build template for automation
  Region:
    Type: String
  Bucket:
    Type: String
    Default: cloudgeeksca-deployment
  DeployBucketPrefix:
    Type: String
    Default: ""
  EnableVPCPeering:
    Type: String
    Default: false
    AllowedValues: [false, true]
  VpcCIDR:
    Type: String
    Default: 10.10.0.0/21
  PublicSubnets:
    Type: CommaDelimitedList
    Description: List of 3 subnets
    Default: 10.10.0.0/24,10.10.1.0/24,10.10.2.0/24
  EnvType:
    Type: String
  SSHKey:
    Type: AWS::EC2::KeyPair::KeyName
    Default: devops
Conditions:
  CreatePeer: !Equals [ !Ref EnableVPCPeering, true]
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName
        - Key: kubernetes.io/role/elb
          Value: shared
        - Key: alpha.eksctl.io/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: eksctl.cluster.k8s.io/v1alpha1/cluster-name
          Value: !Sub "${AWS::StackName}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway

  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: Vpc
      CidrBlock: !Select [0, !Ref PublicSubnets]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
        - Key: alpha.eksctl.io/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: eksctl.cluster.k8s.io/v1alpha1/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Public-Subnet-AZ1
          Value: !Sub ${AWS::StackName}-Public-Subnet-AZ1


  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: Vpc
      CidrBlock: !Select [1, !Ref PublicSubnets]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
        - Key: alpha.eksctl.io/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: eksctl.cluster.k8s.io/v1alpha1/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Public-Subnet-AZ2
          Value: !Sub ${AWS::StackName}-Public-Subnet-AZ2

  PubSubnetAz3:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: Vpc
      CidrBlock: !Select [2, !Ref PublicSubnets]
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)
        - Key: alpha.eksctl.io/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: eksctl.cluster.k8s.io/v1alpha1/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Public-Subnet-AZ3
          Value: !Sub ${AWS::StackName}-Public-Subnet-AZ3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes
        - Key: alpha.eksctl.io/cluster-name
          Value: !Sub "${AWS::StackName}"
        - Key: eksctl.cluster.k8s.io/v1alpha1/cluster-name
          Value: !Sub "${AWS::StackName}"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnetAz1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnetAz2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PubSubnetAz3

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref Vpc

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: CreatePeer
    Properties:
      VpcId: !Ref Vpc
      PeerVpcId: vpc-283cac51
      PeerRegion: us-east-1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} peer with Main_Production

Outputs:
  VpcID:
    Description: Created VPC ID
    Value:
      Ref: Vpc
    Export:
      Name: !Sub ${AWS::StackName}-VpcID
  PublicSubnetAz1:
    Description: Public Subnet AZ1 created in VPC
    Value:
      Ref: PubSubnetAz1
  PublicSubnetAz2:
    Description: Public Subnet AZ2 created in VPC
    Value:
      Ref: PubSubnetAz2
  PublicSubnetAz3:
    Description: Public Subnet AZ2 created in VPC
    Value:
      Ref: PubSubnetAz3
  PublicSubnetGroup:
    Value: !Sub ${PubSubnetAz1},${PubSubnetAz2},${PubSubnetAz3}
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetGroup
  VpcCidr:
    Description: VPC network block
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub ${AWS::StackName}-VpcCidr
  StackName:
    Description: Output Stack Name
    Value: !Ref AWS::StackName
  Region:
    Description: Stack location
    Value: !Ref AWS::Region
 
